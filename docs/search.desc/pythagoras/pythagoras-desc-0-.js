searchState.loadedDescShard("pythagoras", 0, "Pythagorean functions for right triangles. Simple helper …\nReturns the hypotenuse (c) of a right triangle given the …\nReturns the radians (r) given the opposite side (a) and …\nReturns the adjacent side (b) given the hypotenuse (c) and …\nReturns radians (r) given the opposite side (a) and …\nReturns the opposite side (a) given the hypotenuse (c) and …\nReturns the radians (r) given the adjacent side (b) and …\nReturns the adjacent side (b) given the radians (r) and …\nGiven radians and the opposite (a), calculate the adjacent …\nReturns the hypotenuse (c) given the radians (r) and the …\nReturns the opposite side(a) given the radians (r) and the …\nGiven radians and the adjacent (b), calculate the opposite …\nReturns the hypotenuse (c) given the radians (r) and the …\nGiven the radians and the hypotenuse (c), return the …\nGiven radians and the hypotenuse (c), calculate the …\nGiven the radians and the hypotenuse (c), return the …\nRightAngle is designed to enable completion of right angle …\nThe hypotenuse, or <code>c</code>\nThe hypotenuse, or <code>c</code>\nReturns the argument unchanged.\nReturns the argument unchanged.\nThere are 2 ways to use this method.\nCalls <code>U::from(self)</code>.\nCalls <code>U::from(self)</code>.\nGiven the angle (in radians) and one side, calculate the …\nThe angle in radians.  You can flip to degrees with …\nThe angle in radians.  You can flip to degrees with …\nThe opposite side, or `a’\nThe opposite side, or `a’\nThe adjacent side, or <code>b</code>\nThe adjacent side, or <code>b</code>\nGiven two sides, calculate the third side. The angle is …")